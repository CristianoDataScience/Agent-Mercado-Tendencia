import os
import streamlit as st
import markdown
import pdfkit
from dotenv import load_dotenv, find_dotenv
from crewai import Agent, Task, Crew

# Carregar vari√°veis de ambiente
load_dotenv(find_dotenv())

# Interface
st.set_page_config(page_title="Relat√≥rio de Mercado", layout="wide")
st.title("üìä Gerador de Relat√≥rio de Mercado com IA")

# Input do usu√°rio
sector = st.text_input("Digite o setor ou tema que deseja pesquisar:", "Melhor Projeto para se criar ou melhorar em tecnologia em 2025")

if st.button("üîç Gerar Relat√≥rio"):
    with st.spinner("Gerando relat√≥rio com IA..."):

        # Criando os agentes
        pesquisador = Agent(
            role="Pesquisador de Mercado",
            goal="Coletar e organizar informa√ß√µes relevantes sobre {sector}",
            backstory="""Voc√™ √© um pesquisador experiente que analisa tend√™ncias de mercado e coleta
            dados relevantes sobre {sector}. Seu trabalho √© garantir que todas as informa√ß√µes estejam atualizadas e bem documentadas.""",
            allow_delegation=False,
            verbose=True,
        )

        analista = Agent(
            role="Analista de Tend√™ncias",
            goal="Analisar os dados do setor {sector}",
            backstory="""Voc√™ √© um analista de mercado que examina os dados coletados para identificar
            tend√™ncias emergentes, oportunidades e amea√ßas no setor {sector}.""",
            allow_delegation=False,
            verbose=True,
        )

        redator = Agent(
            role="Redator de Relat√≥rios",
            goal="Elaborar um relat√≥rio consolidado sobre a an√°lise de mercado do setor {sector}.",
            backstory="""Voc√™ √© um redator profissional que transforma an√°lises de mercado em um relat√≥rio
            estruturado e compreens√≠vel para tomadores de decis√£o.""",
            allow_delegation=False,
            verbose=True,
        )

        # Tarefas
        coleta_dados = Task(
            description=(
                "1. Pesquisar e coletar informa√ß√µes atualizadas sobre {sector};"
                "2. Identificar os principais players, tend√™ncia e estat√≠sticas do setor;"
                "3. Organizar os dados de forma clara para an√°lise."
            ),
            expected_output="Um documento estruturado contendo dados de mercado sobre {sector}.",
            agent=pesquisador
        )

        analise_tendencias = Task(
            description=(
                "1. Examinar os dados coletados pelo Pesquisador de Mercado."
                "2. Identificar padr√µes, tend√™ncias emergentes e oportunidades no setor {sector}."
                "3. Elaborar uma an√°lise detalhada destacando os principais pontos."
            ),
            expected_output="Um relat√≥rio com insights e tend√™ncias baseados nos dados do setor {sector}.",
            agent=analista
        )

        redacao_relatorio = Task(
            description=(
                "1. Usar a an√°lise de tend√™ncia para criar um relat√≥rio detalhado sobre {sector}."
                "2. Garantir que o relat√≥rio seja bem estruturado e compreens√≠vel."
                "3. Apresentar um resumo executivo e recomenda√ß√µes finais."
            ),
            expected_output="Um rel√°t√≥rio de an√°lise de mercado em formato Markdown, pronto para leitura e apresenta√ß√£o.",
            agent=redator
        )

        # Crew
        crew = Crew(
            agents=[pesquisador, analista, redator],
            tasks=[coleta_dados, analise_tendencias, redacao_relatorio],
            verbose=True,
        )

        resultado = crew.kickoff(inputs={"sector": sector})

        # Exibir o relat√≥rio no Streamlit (como Markdown)
        st.subheader("üìÑ Relat√≥rio Gerado")
        st.markdown(str(resultado), unsafe_allow_html=True)

        # Gerar HTML e PDF
        html_content = markdown.markdown(str(resultado))
        html_path = "/tmp/relatorio.html"
        pdf_path = f"/tmp/relatorio_{sector.lower().replace(' ', '_')}.pdf"

        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        # Detectar caminho do wkhtmltopdf
        wkhtmltopdf_path = "/opt/homebrew/bin/wkhtmltopdf"  # Altere conforme necess√°rio
        if not os.path.exists(wkhtmltopdf_path):
            st.error(f"‚ùå wkhtmltopdf n√£o encontrado em {wkhtmltopdf_path}.")
        else:
            config = pdfkit.configuration(wkhtmltopdf=wkhtmltopdf_path)
            try:
                pdfkit.from_file(html_path, pdf_path, configuration=config)

                # Exibir bot√£o de download
                with open(pdf_path, "rb") as pdf_file:
                    st.download_button(
                        label="üì• Baixar Relat√≥rio em PDF",
                        data=pdf_file,
                        file_name=f"relatorio_{sector.lower().replace(' ', '_')}.pdf",
                        mime="application/pdf"
                    )
            except Exception as e:
                st.error(f"Erro ao gerar PDF: {str(e)}")